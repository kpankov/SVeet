/* Generated By:JavaCC: Do not edit this line. JavaParserTokenManager.java */
package org.ksplabs.sveet.jcclexer;

/** Token Manager. */
public class JavaParserTokenManager implements JavaParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x1000000000000000L) != 0L)
            return 2;
         if ((active0 & 0xffffffffffffff00L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x1fffffffffL) != 0L)
         {
            jjmatchedKind = 241;
            return 17;
         }
         if ((active0 & 0x8L) != 0L || (active4 & 0x2010000L) != 0L)
            return 35;
         return -1;
      case 1:
         if ((active0 & 0xffefffffffffff00L) != 0L || (active1 & 0xffffffff8fffffffL) != 0L || (active2 & 0xffffffffffffffbfL) != 0L || (active3 & 0x1fffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 241;
               jjmatchedPos = 1;
            }
            return 17;
         }
         if ((active0 & 0x8L) != 0L)
            return 33;
         if ((active0 & 0x10000000000000L) != 0L || (active1 & 0x70000000L) != 0L || (active2 & 0x40L) != 0L)
            return 17;
         return -1;
      case 2:
         if ((active0 & 0x6ffffff17fdf00L) != 0L || (active1 & 0xbfffe1ffcf81fe00L) != 0L || (active2 & 0xfffffffcffffffa2L) != 0L || (active3 & 0xbffebe07fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 241;
               jjmatchedPos = 2;
            }
            return 17;
         }
         if ((active0 & 0xff8000000e802000L) != 0L || (active1 & 0x40001e00207e01ffL) != 0L || (active2 & 0x30000001dL) != 0L || (active3 & 0x1400141f80L) != 0L)
            return 17;
         return -1;
      case 3:
         if ((active0 & 0xff07ffee0d0fdf00L) != 0L || (active1 & 0x2fff1dffcf9dfdffL) != 0L || (active2 & 0x3ffffffc20fff79aL) != 0L || (active3 & 0x786b9c01L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 241;
               jjmatchedPos = 3;
            }
            return 17;
         }
         if ((active0 & 0x680011f0700000L) != 0L || (active1 & 0x9000e00000600200L) != 0L || (active2 & 0xc0000000df000820L) != 0L || (active3 & 0xb8780637eL) != 0L)
            return 17;
         return -1;
      case 4:
         if ((active0 & 0xff07c32a0c47de00L) != 0L || (active1 & 0x2fc6dd9fcfd979ffL) != 0L || (active2 & 0x2dfcfc1c90f3f79aL) != 0L || (active3 & 0x24263546dL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 241;
               jjmatchedPos = 4;
            }
            return 17;
         }
         if ((active0 & 0x3cc4c1080100L) != 0L || (active1 & 0x39006000048400L) != 0L || (active2 & 0x120303e02c0c0000L) != 0L || (active3 & 0x38088800L) != 0L)
            return 17;
         return -1;
      case 5:
         if ((active0 & 0xff05db8a00020000L) != 0L || (active1 & 0x25d6dd1981d921ffL) != 0L || (active2 & 0xccc7f0498d3f502L) != 0L || (active3 & 0x4262406dL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 241;
               jjmatchedPos = 5;
            }
            return 17;
         }
         if ((active0 & 0x200200c45de00L) != 0L || (active1 & 0xa0000864e005800L) != 0L || (active2 & 0x2130801800200298L) != 0L || (active3 & 0x200011400L) != 0L)
            return 17;
         return -1;
      case 6:
         if ((active0 & 0x104810200000000L) != 0L || (active1 & 0x2546041800182100L) != 0L || (active2 & 0xcc4000400009100L) != 0L || (active3 & 0x404060L) != 0L)
            return 17;
         if ((active0 & 0xfe015a8800021c00L) != 0L || (active1 & 0x90d90181c100ffL) != 0L || (active2 & 0x87f0098d36402L) != 0L || (active3 & 0x4222000dL) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 6;
            return 17;
         }
         return -1;
      case 7:
         if ((active0 & 0xbc00188000021c00L) != 0L || (active1 & 0x9098018001007fL) != 0L || (active2 & 0x8600010c22402L) != 0L || (active3 & 0x2000005L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 7;
            return 17;
         }
         if ((active0 & 0x4201420800000000L) != 0L || (active1 & 0x410001c00080L) != 0L || (active2 & 0x1f0088114000L) != 0L || (active3 & 0x40220008L) != 0L)
            return 17;
         return -1;
      case 8:
         if ((active0 & 0xb400188000001400L) != 0L || (active1 & 0x9000018001007eL) != 0L || (active2 & 0x400010c00002L) != 0L || (active3 & 0x2000005L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 8;
            return 17;
         }
         if ((active0 & 0x800000000020800L) != 0L || (active1 & 0x980000000001L) != 0L || (active2 & 0x8200000022400L) != 0L)
            return 17;
         return -1;
      case 9:
         if ((active0 & 0x188000000000L) != 0L || (active1 & 0x1000000000004aL) != 0L || (active3 & 0x2000001L) != 0L)
            return 17;
         if ((active0 & 0xb400000000001400L) != 0L || (active1 & 0x80000180010034L) != 0L || (active2 & 0x400010c00002L) != 0L || (active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 9;
            return 17;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000000000001000L) != 0L || (active1 & 0x100000004L) != 0L || (active2 & 0x400010c00002L) != 0L || (active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 10;
            return 17;
         }
         if ((active0 & 0x3400000000000400L) != 0L || (active1 & 0x80000080010030L) != 0L)
            return 17;
         return -1;
      case 11:
         if ((active2 & 0x400000c00002L) != 0L || (active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 11;
            return 17;
         }
         if ((active0 & 0x8000000000001000L) != 0L || (active1 & 0x100000004L) != 0L || (active2 & 0x10000000L) != 0L)
            return 17;
         return -1;
      case 12:
         if ((active2 & 0xc00002L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 12;
            return 17;
         }
         if ((active2 & 0x400000000000L) != 0L || (active3 & 0x4L) != 0L)
            return 17;
         return -1;
      case 13:
         if ((active2 & 0xc00002L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 13;
            return 17;
         }
         return -1;
      case 14:
         if ((active2 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 14;
            return 17;
         }
         if ((active2 & 0x2L) != 0L)
            return 17;
         return -1;
      case 15:
         if ((active2 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 15;
            return 17;
         }
         return -1;
      case 16:
         if ((active2 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 16;
            return 17;
         }
         return -1;
      case 17:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 17;
            return 17;
         }
         if ((active2 & 0x800000L) != 0L)
            return 17;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 257;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x100L);
      case 37:
         jjmatchedKind = 276;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20000000L);
      case 38:
         jjmatchedKind = 273;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4000400L);
      case 40:
         return jjStopAtPos(0, 244);
      case 41:
         return jjStopAtPos(0, 245);
      case 42:
         jjmatchedKind = 271;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000L);
      case 43:
         jjmatchedKind = 269;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400800L);
      case 44:
         return jjStopAtPos(0, 251);
      case 45:
         jjmatchedKind = 270;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x801000L);
      case 46:
         return jjStartNfaWithStates_0(0, 252, 2);
      case 47:
         jjmatchedKind = 272;
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x0L, 0x0L, 0x2000000L);
      case 58:
         jjmatchedKind = 260;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 250);
      case 60:
         jjmatchedKind = 256;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40200040L);
      case 61:
         jjmatchedKind = 254;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x180000080L);
      case 63:
         return jjStopAtPos(0, 259);
      case 64:
         return jjStopAtPos(0, 253);
      case 91:
         return jjStopAtPos(0, 248);
      case 93:
         return jjStopAtPos(0, 249);
      case 94:
         jjmatchedKind = 275;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x10000000L);
      case 96:
         return jjStopAtPos(0, 289);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3ff00L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1ffc0000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3fffe0000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1fc00000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xffe0000000000000L, 0x7fffL, 0x0L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff8000L, 0x0L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000L, 0x0L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ffff0000000L, 0x0L, 0x0L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000000000L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000000000000L, 0x0L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf80000000000000L, 0x0L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000000000000000L, 0x3fL, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc0L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffff00L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3fffe000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffffc0000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf000000000000000L, 0x7fffL, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf8000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf00000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7ff000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1800000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 246);
      case 124:
         jjmatchedKind = 274;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x8000200L);
      case 125:
         return jjStopAtPos(0, 247);
      case 126:
         return jjStopAtPos(0, 258);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active4 & 0x400L) != 0L)
            return jjStopAtPos(1, 266);
         break;
      case 42:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 33);
         break;
      case 43:
         if ((active4 & 0x800L) != 0L)
            return jjStopAtPos(1, 267);
         break;
      case 45:
         if ((active4 & 0x1000L) != 0L)
            return jjStopAtPos(1, 268);
         break;
      case 60:
         if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L);
      case 61:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         else if ((active4 & 0x20L) != 0L)
            return jjStopAtPos(1, 261);
         else if ((active4 & 0x40L) != 0L)
            return jjStopAtPos(1, 262);
         else if ((active4 & 0x80L) != 0L)
            return jjStopAtPos(1, 263);
         else if ((active4 & 0x100L) != 0L)
            return jjStopAtPos(1, 264);
         else if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(1, 278);
         else if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(1, 279);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 280);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 282);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 283);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 284);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 285);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x180000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0000000L, active1, 0x1181000000000000L, active2, 0x700000001e000700L, active3, 0x7100000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40020000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3c001000c0000L, active1, 0x6200000003000000L, active2, 0x81fc0000000L, active3, 0x18200000L, active4, 0L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60000000L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L, active2, 0x8000700000000000L, active3, 0x20000001L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000f00000L, active1, 0x600000c018000L, active2, 0x800000000000L, active3, 0x3c040000eL, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000c00001f00L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x8000000200000000L, active2, 0x1000000000800L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xff80000000002000L, active1, 0x1ffc000003ffL, active2, 0x2000000000L, active3, 0x800038000L, active4, 0L);
      case 111:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x1fe000000000L, active1, 0xc78e000007e0000L, active2, 0x200000000101fL, active3, 0x1400800000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc004000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 134, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x200001000000L, active1, 0L, active2, 0x3e000L, active3, 0x1ff0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000L, active1, 0L, active2, 0L, active3, 0x40000L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1f0038000000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xe020000L, active1, 0x800000L, active2, 0xe00000001fc00a0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7800L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L, active2, 0L, active3, 0x6000L, active4, 0L);
      case 124:
         if ((active4 & 0x200L) != 0L)
            return jjStopAtPos(1, 265);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 286);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 287);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400600000000L, active1, 0L, active2, 0x110400c0000000L, active3, 0x18000070L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6000000000000L, active2, 0x1000000000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x98000c00000000L, active2, 0x300L, active3, 0x200000L, active4, 0L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 17);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xff00000000000000L, active1, 0xe000000000001ffL, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 210, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x400L, active2, 0xc000000000000L, active3, 0L, active4, 0L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 17);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 160, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x180000c040000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 161, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000080000L, active1, 0x202000000c000000L, active2, 0x2000800000000000L, active3, 0L, active4, 0L);
      case 105:
         if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0xe01000000000L, active2, 0x8000000000006000L, active3, 0x23899f00L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x100000000L, active2, 0x2000400fc0020L, active3, 0x40000000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x6020000000L, active3, 0xeL, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x3e000700000L, active1, 0x10400000c3808000L, active2, 0x1e000000L, active3, 0x4000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x201800000000L, active1, 0x8000002000000000L, active2, 0x700000038800L, active3, 0x800000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4200001800L, active2, 0xe00000800000000L, active3, 0x6000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 128, 17);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 212, 17);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 226, 17);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 228, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000007d0000L, active2, 0x1e0038001000400L, active3, 0x80400001L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4e0000e001c000L, active1, 0x18000000000L, active2, 0x4000000000001002L, active3, 0x20000L, active4, 0L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 17);
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10020000L, active1, 0x1001c0000006000L, active2, 0x1000000098L, active3, 0x300000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c0000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 126, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x1e00L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 48:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 200, 17);
         break;
      case 49:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 201, 17);
         break;
      case 61:
         if ((active4 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 288);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4800001001f00L, active1, 0x18000000008000L, active2, 0x38000000400L, active3, 0x400L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0xf00000800000000L, active1, 0x100000000840000L, active2, 0xc000000000000L, active3, 0L, active4, 0L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 17);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 17);
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 215, 17);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 218, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0x1c000000L, active3, 0x40000000L, active4, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 17);
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 17);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 17);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 17);
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 223, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00c0004000L, active1, 0x20001c0101186800L, active2, 0x200000c00001000L, active3, 0x400cL, active4, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000002000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000000L, active1, 0x41000000000000L, active2, 0x2000000000008000L, active3, 0L, active4, 0L);
      case 104:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc000000L, active2, 0x2L, active3, 0x200000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800200000c088000L, active1, 0x220008000000000L, active2, 0x20000000000018L, active3, 0x20000L, active4, 0L);
      case 107:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 190, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0x300L, active3, 0x18000000L, active4, 0L);
      case 108:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 17);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 17);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000800000000L, active2, 0x10010400803c0000L, active3, 0x20000000L, active4, 0L);
      case 109:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0x2000L, active3, 0L, active4, 0L);
      case 110:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0xc00000000400L, active2, 0x800000000000L, active3, 0x60L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L, active1, 0x2c0001000L, active2, 0xc0006020004000L, active3, 0x8801L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x40000000000001eL, active2, 0xc00000000010080L, active3, 0L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0L);
      case 114:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 227, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x84000000000000L, active2, 0x300000000000L, active3, 0x81000L, active4, 0L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 17);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 17);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 139, 17);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 191, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x60c400400000L, active1, 0x10060L, active2, 0xc00000L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 17);
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000L, active1, 0x11000000180L, active2, 0x10000000020000L, active3, 0x2600000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x800006000000000L, active2, 0x100081000000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000L, active2, 0x2000000000000L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 17);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 219, 17);
         break;
      case 49:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 147, 17);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 220, 17);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000000L, active2, 0L, active3, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x101000000000000L, active1, 0x4010002080182L, active2, 0x40c00000100L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 17);
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L, active2, 0x100400008000000L, active3, 0x40000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x2000008000000000L, active2, 0x101000L, active3, 0x4000L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 17);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 17);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 177, 17);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 188, 17);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 211, 17);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 221, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000010000000000L, active1, 0x20L, active2, 0x2000880000c30200L, active3, 0x1000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000L, active1, 0L, active2, 0x18L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000008000L, active1, 0x40100000000L, active2, 0L, active3, 0x20000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x22000000000L, active1, 0x42001400000000L, active2, 0x14000000002000L, active3, 0x200000060L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L);
      case 107:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L);
      case 108:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 17);
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 176, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x600000000000000L, active1, 0x810000000000000L, active2, 0xc00000000000000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000L, active1, 0L, active2, 0x400L, active3, 0L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 17);
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 207, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x40002000L, active2, 0xe0030000000000L, active3, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000400000L, active1, 0x480000000000001L, active2, 0x2L, active3, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L, active2, 0x8000000000000L, active3, 0x4L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 185, 17);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 203, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000180000044000L, active1, 0x18028100501cL, active2, 0x100000c000L, active3, 0L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 17);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 17);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 17);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 17);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 165, 17);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 166, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 17);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 17);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x810000L, active2, 0x300080000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000800000000000L, active1, 0x200000800000000L, active2, 0x200080L, active3, 0x410009L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L);
      case 120:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 17);
         break;
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x1e00L, active1, 0L, active2, 0L, active3, 0L);
      case 122:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 17);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 17);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 17);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 131, 17);
         break;
      case 49:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 17);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 17);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 17);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000020000L, active1, 0x401101000000L, active2, 0x8400008008000L, active3, 0x40400000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 99:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 180, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80002L, active2, 0x20000L, active3, 0L);
      case 100:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 17);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 175, 17);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 189, 17);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 202, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800002001L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 17);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 17);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 17);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 17);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 208, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100040080100040L, active2, 0x10000400L, active3, 0x4000L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L, active2, 0x4000000000000L, active3, 0x60L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 17);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 181, 17);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 204, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x2000000000000000L, active2, 0xc0000000001100L, active3, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400800000000L, active1, 0x800004L, active2, 0x130080004000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4800200000000L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 17);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 17);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 17);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 164, 17);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 225, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x3800020000000000L, active1, 0x40810000000000L, active2, 0x80000000000L, active3, 0x20008L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4400000000000000L, active1, 0x400018L, active2, 0x100000L, active3, 0x2000000L);
      case 112:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 149, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x10000000000000L, active2, 0L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 17);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x1008000000000L, active1, 0x404000000000000L, active2, 0x240000010000L, active3, 0x200004L);
      case 115:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000001c00L, active1, 0x2100000000100L, active2, 0x400c00000L, active3, 0L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 17);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 17);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 17);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 17);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 135, 17);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 163, 17);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 184, 17);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L, active2, 0x2000L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc00000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 48:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 182, 17);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 186, 17);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 197, 17);
         break;
      case 49:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 183, 17);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 187, 17);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 198, 17);
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x1c00L, active1, 0x80000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1008000000000L, active1, 0x10080000000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1400000000000000L, active1, 0x10000000040L, active2, 0x80000000002L, active3, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 17);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 17);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 17);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 17);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 17);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 136, 17);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 140, 17);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 162, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0xa000000000000000L, active1, 0x100000000000L, active2, 0x240000000000L, active3, 0x220004L);
      case 102:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 206, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0x30000000000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x8L, active2, 0L, active3, 0L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0x2000L, active3, 0x8L);
      case 107:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      case 108:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 17);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 214, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000080L, active2, 0L, active3, 0L);
      case 109:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 143, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10004L, active2, 0x80000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x400000000000L, active2, 0x500000000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x80800000800000L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 114:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 17);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L, active2, 0x8000000000000L, active3, 0x42000000L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 17);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 17);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 17);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 113, 17);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 118, 17);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 122, 17);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0x1000000L, active2, 0xc34400L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000020000000000L, active1, 0x21L, active2, 0L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 114, 17);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 178, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 48:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 168, 17);
         break;
      case 49:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 169, 17);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10002L, active2, 0x8200000000002L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0x180000000000L, active2, 0x400000000000L, active3, 0x4L);
      case 100:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 170, 17);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 209, 17);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 213, 17);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 222, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000000L, active2, 0L, active3, 0x2000000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 17);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 17);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 17);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 104, 17);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 155, 17);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 159, 17);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 171, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x30L, active2, 0x20400L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800108000020000L, active1, 0x44L, active2, 0L, active3, 0L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L, active1, 0x1L, active2, 0L, active3, 0L);
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 17);
         break;
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 17);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 17);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 17);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 148, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0x1L);
      case 112:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 17);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0xa000000000000000L, active1, 0x10000000000008L, active2, 0L, active3, 0L);
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 17);
         break;
      case 116:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 172, 17);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 195, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L);
      case 121:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 17);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 142, 17);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 144, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xc00000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000001000L, active1, 0x10000000000008L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L);
      case 99:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 17);
         break;
      case 100:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 145, 17);
         break;
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 17);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 107, 17);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 17);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 141, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x400010000000L, active3, 0x2000000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x40L, active2, 0L, active3, 0L);
      case 103:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 59, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1400000000000000L, active1, 0x80000000L, active2, 0L, active3, 0x4L);
      case 108:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 173, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc00000L, active3, 0L);
      case 109:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 179, 17);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x108000000000L, active1, 0x20L, active2, 0x2L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 138, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L);
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 108, 17);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10004L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0x80000000000000L, active2, 0L, active3, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10020L, active2, 0x2L, active3, 0L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 65, 17);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0xc00000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000004L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000000L, active2, 0x400000000000L, active3, 0L);
      case 109:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 17);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 116, 17);
         return jjMoveStringLiteralDfa10_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0x80000000L, active2, 0x10000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 17);
         break;
      case 114:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 217, 17);
         break;
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 39, 17);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 17);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 192, 17);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000001000L, active1, 0x10L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0xc00000L, active3, 0L);
      case 98:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 10, 17);
         break;
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000001000L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 61, 17);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 69, 17);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 119, 17);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L);
      case 103:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 58, 17);
         break;
      case 104:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 80, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 60, 17);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L);
      case 115:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 95, 17);
         break;
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 68, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 63, 17);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 66, 17);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 156, 17);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L);
      case 104:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 12, 17);
         break;
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0xc00000L, active3, 0x4L);
      case 115:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 96, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, 0L, active2, active3, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 174, 17);
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active2, 0x2L, active3, 0L);
      case 110:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(12, 194, 17);
         return jjMoveStringLiteralDfa13_0(active2, 0xc00000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, 0L, active2, active3, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, 0L, 0L, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, active2, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active2, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active2, 0x800002L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(14, 129, 17);
         break;
      case 101:
         return jjMoveStringLiteralDfa15_0(active2, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa15_0(active2, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active2, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active2, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active2, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active2, 0x400000L);
      case 116:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(17, 151, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(18, 150, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x10000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec6 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec7 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec9 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec10 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec11 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec12 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec13 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec14 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec16 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec17 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec18 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec19 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec20 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec21 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec22 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec23 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec24 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec25 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec27 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec28 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 73;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if (curChar == 47)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 229)
                        kind = 229;
                     jjCheckNAddStates(3, 11);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 39)
                     jjAddStates(12, 16);
                  else if (curChar == 47)
                     jjAddStates(17, 18);
                  else if (curChar == 36)
                  {
                     if (kind > 241)
                        kind = 241;
                     jjCheckNAdd(17);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  else if (curChar == 46)
                     jjCheckNAdd(2);
                  if (curChar == 48)
                     jjAddStates(22, 23);
                  break;
               case 1:
                  if (curChar == 46)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddStates(24, 26);
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddStates(19, 21);
                  break;
               case 8:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 11:
                  if (curChar == 34 && kind > 240)
                     kind = 240;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 30);
                  break;
               case 13:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 14:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if (curChar != 36)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 48)
                     jjAddStates(22, 23);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(25, 6);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(31, 6);
                  break;
               case 32:
                  if (curChar == 47)
                     jjAddStates(17, 18);
                  break;
               case 33:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 36:
                  if (curChar != 47)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(0, 2);
                  break;
               case 37:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(0, 2);
                  break;
               case 38:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 39:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 40:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddStates(3, 11);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 6);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(51, 6);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar != 46)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddStates(39, 41);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddStates(39, 41);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAddTwoStates(57, 6);
                  break;
               case 58:
                  if (curChar == 39)
                     jjAddStates(12, 16);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddTwoStates(60, 43);
                  break;
               case 62:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddTwoStates(62, 43);
                  break;
               case 64:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddTwoStates(64, 43);
                  break;
               case 65:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if (curChar == 39 && kind > 239)
                     kind = 239;
                  break;
               case 68:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 66);
                  break;
               case 70:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 71:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(17);
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 6:
                  if ((0x5000000050L & l) != 0L && kind > 234)
                     kind = 234;
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(44, 46);
                  break;
               case 10:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 17:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(17);
                  break;
               case 19:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 23:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 26:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 29:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 34:
                  if (kind > 2)
                     kind = 2;
                  break;
               case 37:
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(0, 2);
                  break;
               case 43:
                  if ((0x100000001000L & l) != 0L && kind > 229)
                     kind = 229;
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 59:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddTwoStates(60, 43);
                  break;
               case 61:
                  if ((0x800000008000L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddTwoStates(62, 43);
                  break;
               case 63:
                  if ((0x400000004L & l) == 0L)
                     break;
                  if (kind > 229)
                     kind = 229;
                  jjCheckNAddTwoStates(64, 43);
                  break;
               case 65:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 67:
                  if (curChar == 92)
                     jjAddStates(59, 61);
                  break;
               case 68:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(19, 21);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 241)
                        kind = 241;
                     jjCheckNAdd(17);
                  }
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(19, 21);
                  break;
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(19, 21);
                  break;
               case 16:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 241)
                     kind = 241;
                  jjCheckNAdd(17);
                  break;
               case 34:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 2)
                     kind = 2;
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(0, 2);
                  break;
               case 65:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 73 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   37, 38, 40, 42, 43, 44, 45, 6, 48, 49, 52, 53, 59, 61, 63, 65, 
   67, 35, 36, 8, 9, 11, 19, 26, 2, 3, 6, 8, 9, 13, 11, 20, 
   21, 27, 28, 29, 44, 45, 6, 54, 55, 6, 4, 5, 10, 12, 14, 22, 
   23, 24, 25, 30, 31, 46, 47, 50, 51, 56, 57, 68, 69, 71, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\141\154\151\141\163", 
"\141\154\167\141\171\163", "\141\154\167\141\171\163\137\143\157\155\142", 
"\141\154\167\141\171\163\137\146\146", "\141\154\167\141\171\163\137\154\141\164\143\150", "\141\156\144", 
"\141\163\163\145\162\164", "\141\163\163\151\147\156", "\141\163\163\165\155\145", 
"\141\165\164\157\155\141\164\151\143", "\142\145\146\157\162\145", "\142\145\147\151\156", "\142\151\156\144", 
"\142\151\156\163", "\142\151\156\163\157\146", "\142\151\164", "\142\162\145\141\153", 
"\142\165\146", "\142\165\146\151\146\60", "\142\165\146\151\146\61", "\142\171\164\145", 
"\143\141\163\145", "\143\141\163\145\170", "\143\141\163\145\172", "\143\145\154\154", 
"\143\150\141\156\144\154\145", "\143\154\141\163\163", "\143\154\157\143\153\151\156\147", 
"\143\155\157\163", "\143\157\156\146\151\147", "\143\157\156\163\164", 
"\143\157\156\163\164\162\141\151\156\164", "\143\157\156\164\145\170\164", "\143\157\156\164\151\156\165\145", 
"\143\157\166\145\162", "\143\157\166\145\162\147\162\157\165\160", 
"\143\157\166\145\162\160\157\151\156\164", "\143\162\157\163\163", "\144\145\141\163\163\151\147\156", 
"\144\145\146\141\165\154\164", "\144\145\146\160\141\162\141\155", "\144\145\163\151\147\156", 
"\144\151\163\141\142\154\145", "\144\151\163\164", "\144\157", "\145\144\147\145", "\145\154\163\145", 
"\145\156\144", "\145\156\144\143\141\163\145", "\145\156\144\143\154\141\163\163", 
"\145\156\144\143\154\157\143\153\151\156\147", "\145\156\144\143\157\156\146\151\147", 
"\145\156\144\146\165\156\143\164\151\157\156", "\145\156\144\147\145\156\145\162\141\164\145", 
"\145\156\144\147\162\157\165\160", "\145\156\144\151\156\164\145\162\146\141\143\145", 
"\145\156\144\155\157\144\165\154\145", "\145\156\144\160\141\143\153\141\147\145", 
"\145\156\144\160\162\151\155\151\164\151\166\145", "\145\156\144\160\162\157\147\162\141\155", 
"\145\156\144\160\162\157\160\145\162\164\171", "\145\156\144\163\145\161\165\145\156\143\145", 
"\145\156\144\163\160\145\143\151\146\171", "\145\156\144\164\141\142\154\145", "\145\156\144\164\141\163\153", 
"\145\156\165\155", "\145\166\145\156\164", "\145\170\160\145\143\164", 
"\145\170\160\157\162\164", "\145\170\164\145\156\144\163", "\145\170\164\145\162\156", 
"\146\151\156\141\154", "\146\151\162\163\164\137\155\141\164\143\150", "\146\157\162", 
"\146\157\162\143\145", "\146\157\162\145\141\143\150", "\146\157\162\145\166\145\162", 
"\146\157\162\153", "\146\157\162\153\152\157\151\156", "\146\165\156\143\164\151\157\156", 
"\147\145\156\145\162\141\164\145", "\147\145\156\166\141\162", "\150\151\147\150\172\60", 
"\150\151\147\150\172\61", "\151\146", "\151\146\146", "\151\146\156\157\156\145", 
"\151\147\156\157\162\145\137\142\151\156\163", "\151\154\154\145\147\141\154\137\142\151\156\163", 
"\151\155\160\157\162\164", "\151\156\143\144\151\162", "\151\156\143\154\165\144\145", 
"\151\156\151\164\151\141\154", "\151\156\157\165\164", "\151\156\160\165\164", "\151\156\163\151\144\145", 
"\151\156\163\164\141\156\143\145", "\151\156\164", "\151\156\164\145\147\145\162", 
"\151\156\164\145\162\146\141\143\145", "\151\156\164\145\162\163\145\143\164", "\152\157\151\156", 
"\152\157\151\156\137\141\156\171", "\152\157\151\156\137\156\157\156\145", "\154\141\162\147\145", 
"\154\151\142\154\151\163\164", "\154\151\142\162\141\162\171", "\154\157\143\141\154", 
"\154\157\143\141\154\160\141\162\141\155", "\154\157\147\151\143", "\154\157\156\147\151\156\164", 
"\155\141\143\162\157\155\157\144\165\154\145", "\155\141\164\143\150\145\163", "\155\145\144\151\165\155", 
"\155\157\144\160\157\162\164", "\155\157\144\165\154\145", "\156\141\156\144", 
"\156\145\147\145\144\147\145", "\156\145\167", "\156\155\157\163", "\156\157\162", 
"\156\157\163\150\157\167\143\141\156\143\145\154\154\145\144", "\156\157\164", "\156\157\164\151\146\60", "\156\157\164\151\146\61", 
"\156\165\154\154", "\157\162", "\157\165\164\160\165\164", "\160\141\143\153\141\147\145", 
"\160\141\143\153\145\144", "\160\141\162\141\155\145\164\145\162", "\160\155\157\163", 
"\160\157\163\145\144\147\145", "\160\162\151\155\151\164\151\166\145", "\160\162\151\157\162\151\164\171", 
"\160\162\157\147\162\141\155", "\160\162\157\160\145\162\164\171", "\160\162\157\164\145\143\164\145\144", 
"\160\165\154\154\60", "\160\165\154\154\61", "\160\165\154\154\144\157\167\156", 
"\160\165\154\154\165\160", 
"\160\165\154\163\145\163\164\171\154\145\137\157\156\144\145\164\145\143\164", "\160\165\154\163\145\163\164\171\154\145\137\157\156\145\166\145\156\164", 
"\160\165\162\145", "\162\141\156\144", "\162\141\156\144\143", 
"\162\141\156\144\143\141\163\145", "\162\141\156\144\163\145\161\165\145\156\143\145", "\162\143\155\157\163", 
"\162\145\141\154", "\162\145\141\154\164\151\155\145", "\162\145\146", "\162\145\147", 
"\162\145\154\145\141\163\145", "\162\145\160\145\141\164", "\162\145\164\165\162\156", 
"\162\156\155\157\163", "\162\160\155\157\163", "\162\164\162\141\156", 
"\162\164\162\141\156\151\146\60", "\162\164\162\141\156\151\146\61", "\163\143\141\154\141\162\145\144", 
"\163\145\161\165\145\156\143\145", "\163\150\157\162\164\151\156\164", "\163\150\157\162\164\162\145\141\154", 
"\163\150\157\167\143\141\156\143\145\154\154\145\144", "\163\151\147\156\145\144", "\163\155\141\154\154", "\163\157\154\166\145", 
"\163\160\145\143\151\146\171", "\163\160\145\143\160\141\162\141\155", "\163\164\141\164\151\143", 
"\163\164\162\151\156\147", "\163\164\162\157\156\147\60", "\163\164\162\157\156\147\61", 
"\163\164\162\165\143\164", "\163\165\160\145\162", "\163\165\160\160\154\171\60", 
"\163\165\160\160\154\171\61", "\164\141\142\154\145", "\164\141\147\147\145\144", "\164\141\163\153", 
"\164\150\151\163", "\164\150\162\157\165\147\150\157\165\164", "\164\151\155\145", 
"\164\151\155\145\160\162\145\143\151\163\151\157\156", "\164\151\155\145\165\156\151\164", "\164\162\141\156", 
"\164\162\141\156\151\146\60", "\164\162\141\156\151\146\61", "\164\162\151", "\164\162\151\60", 
"\164\162\151\61", "\164\162\151\141\156\144", "\164\162\151\157\162", 
"\164\162\151\162\145\147", "\164\171\160\145", "\164\171\160\145\144\145\146", "\165\156\151\157\156", 
"\165\156\151\161\165\145", "\165\156\163\151\147\156\145\144", "\165\163\145", "\165\167\151\162\145", 
"\166\141\162", "\166\145\143\164\157\162\145\144", "\166\151\162\164\165\141\154", 
"\166\157\151\144", "\167\141\151\164", "\167\141\151\164\137\157\162\144\145\162", 
"\167\141\156\144", "\167\145\141\153\60", "\167\145\141\153\61", "\167\150\151\154\145", 
"\167\151\154\144\143\141\162\144", "\167\151\162\145", "\167\151\164\150", "\167\151\164\150\151\156", 
"\167\157\162", "\170\156\157\162", "\170\157\162", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\100", "\75", "\72\75", "\74", "\41", "\176", 
"\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", 
"\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\53\75", 
"\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", "\140", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff73L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfff3843fffffffffL, 
   0x3ffffffffL, 
};
static final long[] jjtoMore = {
   0x8cL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[73];
private final int[] jjstateSet = new int[146];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JavaParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JavaParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 73; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
